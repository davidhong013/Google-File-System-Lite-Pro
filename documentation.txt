After doing some research, i think using gRPC might be the best choice here. Consider setting up docker containers for every servers and clients,
so that we do not have to worry about the dependecies. 
Some dependecies we need are : grpcio grpcio-tools



some of the rpc classes that I compiled:

MasterServerToClientStub:
    This class is the client-side interface for making requests to the Master Server (in your GFS system). 
    It defines the methods for interacting with the Master Server (e.g., creating files, reading files, deleting files)

MasterServerToClientServicer:
    This is the server-side interface for implementing the actual logic of the Master Server. 
    The methods defined here need to be implemented with the functionality for each operation (like creating files, reading files, etc.)

add_MasterServerToClientServicer_to_server:
    This function is used to register the MasterServerToClientServicer with a gRPC server. 
    It binds the service methods to their implementations so that the server knows what to do when it receives requests

MasterServerToClient:
    Experimental, without using a stub

ChunkServerToClientStub:
    This is the client-side interface for interacting with the Chunk Server. 
    It defines methods to interact with the Chunk Server, which handles storing and retrieving file chunks

ChunkServerToClientServicer:
    This is the server-side counterpart for the ChunkServerToClientStub class. 
    It's used to implement the actual logic of the Chunk Server

The rest of them are pretty self explanatory i guess

Feb/20: successfully tested the rpc messages on a virtual machine, insecure channel works


Data Structures in Master Server:
file_list: A key-value dictionary that has file names to be keys, and the values to be file_object.
file_object: 
    The wrap around of the files, it should contain the information/metadata of the file
    Number of visits of the files
    An array of chunk_objects, because a file can contain many chunks
    Each entry in the array is a queue of chunk servers,
    because a chunk can be allocated on multiple chunk servers
chunk_object:
    The wrap around of the chunks, it should contain the information/metadata of the chunks of a file
    Size of the current chunk(can be an offset, the maximum is 8MB)




Creating a file:
    when the clients request to create a file, the master server should know it is chunk 0 of the file, and the master server should
    add the file to its files memory storage. It should also create corresponding file object and chunk object to ensure its file system
    integrity
    
    The master server should randomly assign two chunk servers to the clients to let them create chunk 0 for the file. Due to the limititations, 
    the default number of replicas of a chunk is 2



to run the master docker on server:
docker build -t my-python-app .
docker run -p 50051:50051 my-python-app
